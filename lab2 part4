a, b = 1, 2
print('global:', a+b)


def simple():
    print('simple:', a + b)


simple()


# Локальное пространство - имена локальных в функции переменных
a, b = 1, 2
print('global:', a+b)


def simple():
    # Локальное пространство имен  имен появляется в момент вызова функции
    c, d = 3, 4
    print('simple:', c + d)


def simple_2():
    # Локальное пространство имен
    x, y = 3, 4
    print('simple_2:', x + y)
    # print('simple_2:', c + d)

simple()
simple_2()
print('global:', c + d)

# Операторы управления потоком не создают локального пространства имен
if 2 > 1:
    e, f = 5, 6
    print('if:', e + f)


2.
def vector_module(x, y, z):
    return (x ** 2 + y ** 2 + z ** 2) ** .5


# позиционные параметры
res = vector_module(2, 3, 4)
print(res)

# именованные параметры
res = vector_module(x=2, y=3, z=4)
print(res)

# если параметры именованные, то порядок неважен
res = vector_module(z=4, x=2, y=3)
print(res)

# можно совмещать
res = vector_module(2, 3, z=4)
print(res)


# можно потребовать, что бы при вызове некоторые параметры указывались явно
# это будут все параметры, которые идут после *
def vector_module(x, y, *, z):
    return (x ** 2 + y ** 2 + z ** 2) ** .5


# не пройдёт
res = vector_module(2, 3, 4)
# все нормально
res = vector_module(2, 3, z=4)
res = vector_module(z=4, x=2, y=3)


# можно потребовать указание всех параметров явно
def vector_module(*, x, y, z):
    return (x ** 2 + y ** 2 + z ** 2) ** .5


# не пройдёт
res = vector_module(2, 3, 4)
res = vector_module(2, 3, z=4)
# все нормально
res = vector_module(z=4, x=2, y=3)


# неправильные вызовы функций
# res = vector_module()  # не передали ни одного параметра
# res = vector_module(2, 3)  # передали мало параметров
# res = vector_module(2, 3, 3, 4)  # передали много параметров
# res = vector_module(x=2, y=3, x=4)  # повтор параметра
# res = vector_module(2, 3, x=4)  # повтор параметра
# res = vector_module(2, y=3, 4)  # позиционный параметр идет после именованного
# res = vector_module(x=2, y=3, z=5, dist=4)  # неизвестное имя параметра


# распаковка параметров (аргументов)
def vector_module(x, y, z):
    return (x ** 2 + y ** 2 + z ** 2) ** .5


# распаковка позиционных параметров
some_list = [2, 3, 4]
res = vector_module(*some_list)
# x, y, z = some_list
# vector_module(2, 3, 4)
print(res)


# распаковка именованных параметров
some_dict = {'x': 2, 'y': 3, 'z': 4}
res = vector_module(**some_dict)
# vector_module(x=2, y=3, z=4)
print(res)

# можно совмещать
some_list = [2, 3]
some_dict = dict(z=4)
res = vector_module(*some_list, **some_dict)
# vector_module(2, 3, z=4)
some_list = [3, 4]
res = vector_module(2, *some_list)
print(res)

# самый лучший и устойчивый вызов - именованными параметрами
res = vector_module(x=2, y=3, z=4)
print(res)


# параметры по умолчанию
def process(subject, action='мыла', object='раму'):
    print("Кто - ", subject)
    print("Делал(а) - ", action)
    print("Над чем - ", object)
    print("Получается :", subject, action, object)


process(subject='Мама')
process(subject='Папа', action='сломал')
process(subject='Кржижановский', action='видел', object='Ленина')  # https://goo.gl/My5Wx7


# значения по умолчанию вычисляются в точке определения функции, при компиляции
# обычная ошибка - изменяемый обьект в качестве параметра по умолчанию
def add_element_to_list(element, list_to_add=[]):
    """добавляем элемент к списку"""
    list_to_add.append(element)
    return list_to_add


my_list = [3, 4, 5]
add_element_to_list(element=1, list_to_add=my_list)
print(my_list)

# new_list = add_element_to_list(element=1)
# print(new_list)
# add_element_to_list(element=7, list_to_add=new_list)
# print(new_list)

# other_new_list = add_element_to_list(element=2)
# print(other_new_list)
# print(new_list)


# решение проблемы
def add_element_to_list(element, list_to_add=None):
    """добавляем элемент к списку"""
    if list_to_add is None:
        list_to_add = []
    list_to_add.append(element)
    return list_to_add


my_list = [3, 4, 5]
add_element_to_list(element=1, list_to_add=my_list)
print(my_list)

# new_list = add_element_to_list(element=1)
# print(new_list)
# add_element_to_list(element=7, list_to_add=new_list)
# print(new_list)

# other_new_list = add_element_to_list(element=2)
# print(other_new_list)
# print(new_list)
3. 
# Произвольное число параметров
print(1, 2, 3, 4, 5, 56, 6,)


# Произвольное число позиционных параметров
def print_them_all_v1(*args):
    print('print_them_all_v1')
    print('тип args:', type(args))
    print(args)
    for i, arg in enumerate(args):
        print('позиционный параметр:', i, arg)


print_them_all_v1(2, 'привет', 5.6)

# распаковка
my_favorite_pets = ['lion', 'elephant', 'monkey', 'cat', 'horse']
print_them_all_v1(my_favorite_pets)
print_them_all_v1(*my_favorite_pets)


# Произвольное число именованных параметров
def print_them_all_v2(**kwargs):
    print('print_them_all_v2')
    print('тип kwargs:', type(kwargs))
    print(kwargs)
    for key, value in kwargs.items():
        print('именованный аргумент:', key, '=', value)


print_them_all_v2(name='Вася', address='Moscow')

# распаковка
my_friend = {'name': 'Вася', 'address': 'Moscow', 'age': 25}
print_them_all_v2(**my_friend)


# неправильные вызовы
print_them_all_v1(name='Вася', address='Moscow')
print_them_all_v2('Вася', 'Moscow', 25)


# Комбинация
def print_them_all_v3(*args, **kwargs):
    print('print_them_all_v3')
    print('тип args:', type(args))
    print(args)
    for i, arg in enumerate(args):
        print('позиционный параметр:', i, arg)
    print('тип kwargs:', type(kwargs))
    print(kwargs)
    for key, value in kwargs.items():
        print('именованный аргумент:', key, '=', value)


print_them_all_v3('Вася', 'Moscow', 25)
print_them_all_v3(name='Вася', address='Moscow')

print_them_all_v3(1000, 'рублей', name='Вася', address='Moscow')

my_friend = {'name': 'Вася', 'address': 'Moscow'}
print_them_all_v3(1000, 'рублей', **my_friend)


# При создании функции можно указывать как обычные параметры, так и произвольные параметры
def print_them_all_v4(a, b=5, *args, **kwargs):
    print('print_them_all_v4')
    print('a и b:', a, b)
    print('тип args:', type(args))
    print(args)
    for i, arg in enumerate(args):
        print('позиционный параметр:', i, arg)
    print('тип kwargs:', type(kwargs))
    print(kwargs)
    for key, value in kwargs.items():
        print('именованный аргумент:', key, '=', value)


print_them_all_v4(5, 6, 7, 8, cat='мяу!')
print_them_all_v4(5, b=8, cat='мяу!')
print_them_all_v4(5, cat='мяу!', address='Moscow')



# else:
#     e, f = 7, 8
print('global:', e + f)

for elem in [1, 2, 3]:
    print('for:', elem)
    e, f = 5, 6
print('global:', elem)
print('global:', e + f)
e, f = 0, 0


# перекрытие глобальных переменных
a, b = 1, 2
print('global:', a+b)


def simple():
    # Локальное пространство имен
    a, b = 3, 4
    print('simple:', a + b)


simple()
print('global', a+b)


# Если переменной нет в локальном namespace, то значение берется из глобального namespace
a, b = 1, 2
print('global:', a+b)

def simple():
    # Локальное пространство имен
    b = 4
    print('simple:', a + b)


simple()
print('global', a+b)


# если в функции есть присвоение - это будет локальная переменная
def simple():
    # Локальное пространство имен
    print('simple:', a + b)
    a = 9
    print('simple:', a + b)


# параметры - это локальные переменные
def simple_3(a, b):
    print('simple:', a + b)


a, b = 2, 2
print('global', a+b)
simple_3(a=3, b=4)

4.
def factorial(n):
    if n == 1:
        return 1
    factorial_n_minus_1 = factorial(n=n - 1)
    return n * factorial_n_minus_1


print(factorial(9))


# рекурсия часто используется для обхода деревьев
html_dom = {
    'html': {
        'head': {
            'title': 'Колобок',
        },
        'body': {
            'h2': 'Привет!',
            'div': 'Хочешь, я расскажу тебе сказку?',
            'p': 'Жили-были старик со старухой...',
        }
    }
}


def find_element(tree, element_name):
    if element_name in tree:
        return tree[element_name]
    for key, sub_tree in tree.items():
        if isinstance(sub_tree, dict):
            result = find_element(tree=sub_tree, element_name=element_name)
            if result:
                break
    else:
        result = None
    return result


res = find_element(tree=html_dom, element_name='title')
print(res)
